generator client {
  provider        = "prisma-client-js"
  output          = "./generated"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  output                   = "./schemas"
  includeRequiredFields    = "true"
  keepRelationScalarFields = "true"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, btree_gin]
}

// ========================================
// ENUMS - ESTADOS Y TIPOS ESPECÍFICOS DE BOLIVIA
// ========================================

enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  INACTIVE
  SUSPENDED
  LOCKED
  PASSWORD_RESET
  DELETED
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
  RETIRED
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum CartStatus {
  ACTIVE
  PROCESSING
  COMPLETED
  ABANDONED
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  GIFT_CARD
  LOYALTY_POINTS
  QR_PAYMENT
  ELECTRONIC_WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum InventoryTransactionType {
  PURCHASE
  SALE
  ADJUSTMENT
  TRANSFER
  RETURN
  DAMAGED
  EXPIRED
  THEFT
  LOSS
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  OUT_OF_STOCK
}

enum CashRegisterStatus {
  OPEN
  CLOSED
  SUSPENDED
}

// Enums específicos de Bolivia
enum DocumentType {
  NIT
  CI
  PASSPORT
  FOREIGN_ID
}

enum InvoiceType {
  FACTURA
  FACTURA_EXENTA
  NOTA_CREDITO
  NOTA_DEBITO
  GUIA_REMISION
  COMPROBANTE_ALQUILER
  NOTA_SIMPLE
}

enum TaxType {
  IVA_13
  IVA_0
  EXENTO
  ICE
  IT
  IUE
}

enum BusinessType {
  EMPRESA_UNIPERSONAL
  SOCIEDAD_ANONIMA
  SOCIEDAD_LIMITADA
  SOCIEDAD_COOPERATIVA
  EMPRESA_PUBLICA
  ORGANIZACION_NO_LUCRATIVA
  PERSONA_NATURAL
}

enum Department {
  LA_PAZ
  COCHABAMBA
  SANTA_CRUZ
  ORURO
  POTOSI
  CHUQUISACA
  TARIJA
  BENI
  PANDO
}

enum Currency {
  BOB
  USD
  EUR
}

// ========================================
// MODELOS PRINCIPALES ADAPTADOS A BOLIVIA
// ========================================

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique @db.VarChar(50)
  // email         String     @unique @db.VarChar(100)
  // first_name    String     @db.VarChar(50)
  // last_name     String?    @db.VarChar(50)
  passwordHash String     @map("password_hash") @db.VarChar(255)
  phone        String?    @db.VarChar(20)
  status       UserStatus @default(PENDING_VERIFICATION)
  roleId       Int        @map("role_id")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)
  lastLogin    DateTime?  @map("last_login") @db.Timestamptz(6)

  role               Role                @relation(fields: [roleId], references: [id])
  employee           Employee?
  auditLogs          AuditLog[]
  cashRegisters      CashRegister[]
  sales              Sale[]
  carts              Cart[]
  // inventoryTransactions InventoryTransaction[]
  // businesses            Business[]
  purchaseOrders     PurchaseOrder[]
  auditCashRegisters AuditCashRegister[]

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(50)
  name        String   @db.VarChar(50)
  description String?  @db.Text()
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(50)
  name        String   @db.VarChar(100)
  description String?  @db.Text()
  module      String   @default("") @db.VarChar(50)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Business {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(100)
  legalName      String?        @map("legal_name") @db.VarChar(150)
  description    String?        @db.Text()
  nit            String?        @unique @db.VarChar(20) // NIT boliviano
  businessType   BusinessType   @default(PERSONA_NATURAL) @map("business_type")
  email          String?        @db.VarChar(100)
  phone          String?        @db.VarChar(20)
  address        String?        @db.Text()
  city           String?        @db.VarChar(50)
  department     Department     @default(LA_PAZ)
  country        String         @default("Bolivia") @db.VarChar(50)
  postalCode     String?        @map("postal_code") @db.VarChar(10)
  logoUrl        String?        @map("logo_url")
  website        String?
  timezone       String         @default("America/La_Paz") @db.VarChar(50)
  currency       Currency       @default(BOB)
  defaultTaxRate Decimal        @default(13) @map("default_tax_rate") @db.Decimal(5, 2) // IVA 13%
  status         BusinessStatus @default(ACTIVE)
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?      @map("deleted_at")
  createdBy      Int            @default(0) @map("created_by")
  updatedBy      Int            @default(0) @map("updated_by")
  deletedBy      Int?           @map("deleted_by")

  cashRegisters    CashRegister[]
  sales            Sale[]
  carts            Cart[]
  purchaseOrders   PurchaseOrder[]
  // inventoryTransactions InventoryTransaction[]
  fiscalSettings   FiscalSettings?
  auditLogs        AuditLog[]
  employees        Employee[]
  businessProducts BusinessProduct[]
  suppliers        Supplier[]
  customers        Customer[]
  // User                  User?                  @relation(fields: [userId], references: [id])
  // userId                Int?

  @@map("businesses")
}

model FiscalSettings {
  id                   Int       @id @default(autoincrement())
  businessId           Int       @unique @map("business_id")
  authorizationNumber  String    @unique @map("authorization_number") @db.VarChar(50) // Número de autorización Siat
  activityCode         String    @map("activity_code") @db.VarChar(20) // Código de actividad económica
  lawNumber            String    @map("law_number") @db.VarChar(20) // Número de ley
  invoiceSeries        String    @map("invoice_series") @db.VarChar(10) // Serie de facturas
  invoiceStartNumber   Int       @default(1) @map("invoice_start_number")
  invoiceCurrentNumber Int       @default(1) @map("invoice_current_number")
  invoiceEndNumber     Int       @map("invoice_end_number")
  isElectronic         Boolean   @default(true) @map("is_electronic") // Facturación electrónica
  siatUrl              String?   @map("siat_url") @db.VarChar(200)
  siatToken            String?   @map("siat_token") @db.VarChar(500)
  siatEnvironment      String    @default("TEST") @map("siat_environment") @db.VarChar(10) // TEST, PROD
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime? @map("deleted_at")
  createdBy            Int       @default(0) @map("created_by")
  updatedBy            Int       @default(0) @map("updated_by")
  deletedBy            Int?      @map("deleted_by")

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("fiscal_settings")
}

model Employee {
  id               Int            @id @default(autoincrement())
  userId           Int            @unique @map("user_id")
  businessId       Int            @default(1) @map("business_id")
  firstName        String         @map("first_name") @db.VarChar(50)
  lastName         String?        @map("last_name") @db.VarChar(50)
  position         String         @db.VarChar(100)
  department       String?        @db.VarChar(50)
  startDate        DateTime       @map("start_date")
  endDate          DateTime?      @map("end_date")
  salary           Decimal?       @db.Decimal(10, 2)
  status           EmployeeStatus @default(ACTIVE)
  gender           Gender         @default(UNSPECIFIED)
  birthDate        DateTime?      @map("birth_date")
  email            String?        @unique @db.VarChar(100)
  phone            String?        @db.VarChar(20)
  address          String?        @db.Text()
  emergencyContact String?        @map("emergency_contact") @db.VarChar(100)
  emergencyPhone   String?        @map("emergency_phone") @db.VarChar(20)
  ciNumber         String?        @unique @map("ci_number") @db.VarChar(15) // Cédula de identidad
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt        DateTime?      @map("deleted_at")
  createdBy        Int            @default(0) @map("created_by")
  updatedBy        Int            @default(0) @map("updated_by")
  deletedBy        Int?           @map("deleted_by")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("employees")
}

// Product Categories
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.Text()
  parentId    Int?      @map("parent_id")
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at")
  createdBy   Int       @default(0) @map("created_by")
  updatedBy   Int       @default(0) @map("updated_by")
  deletedBy   Int?      @map("deleted_by")

  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  childrens Category[] @relation("CategoryHierarchy")
  products  Product[]

  @@map("categories")
}

model Product {
  id           Int           @id @default(autoincrement())
  categoryId   Int           @map("category_id")
  sku          String?       @unique @db.VarChar(50)
  barcode      String?       @unique @db.VarChar(50)
  name         String        @db.VarChar(200)
  description  String?       @db.Text()
  brand        String?       @db.VarChar(100)
  model        String?       @db.VarChar(100)
  unit         String?       @default("pcs") @db.VarChar(20) // kg, l, pcs, etc. - Temporalmente opcional
  weight       Decimal?      @db.Decimal(8, 3)
  dimensions   String?       @db.VarChar(50) // "LxWxH"
  costPrice    Decimal       @default(0) @map("cost_price") @db.Decimal(10, 2)
  sellingPrice Decimal       @default(0) @map("selling_price") @db.Decimal(10, 2)
  taxType      TaxType       @default(IVA_13) @map("tax_type")
  taxRate      Decimal       @default(13) @map("tax_rate") @db.Decimal(5, 2) // IVA 13%
  minStock     Int           @default(0) @map("min_stock")
  maxStock     Int?          @map("max_stock")
  reorderPoint Int           @default(0) @map("reorder_point")
  isActive     Boolean       @default(true) @map("is_active")
  status       ProductStatus @default(ACTIVE)
  expiryDate   DateTime?     @map("expiry_date")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime?     @map("deleted_at")
  createdBy    Int           @default(0) @map("created_by")
  updatedBy    Int           @default(0) @map("updated_by")
  deletedBy    Int?          @map("deleted_by")

  category           Category            @relation(fields: [categoryId], references: [id])
  businessProducts   BusinessProduct[]
  cartItems          CartItem[]
  saleItems          SaleItem[]
  purchaseOrderItems PurchaseOrderItem[]
  // inventoryTransactions InventoryTransaction[]

  @@map("products")
}

model BusinessProduct {
  id             Int       @id @default(autoincrement())
  businessId     Int       @map("business_id")
  productId      Int       @map("product_id")
  customPrice    Decimal   @map("custom_price") @db.Decimal(10, 2)
  currentStock   Int       @default(0) @map("current_stock")
  reservedStock  Int       @default(0) @map("reserved_stock")
  availableStock Int       @default(0) @map("available_stock")
  lastRestock    DateTime? @map("last_restock")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([businessId, productId])
  @@map("business_products")
}

model Supplier {
  id             Int            @id @default(autoincrement())
  businessId     Int            @default(1) @map("business_id")
  code           String?        @unique @db.VarChar(50)
  name           String         @db.VarChar(200)
  documentType   DocumentType   @default(NIT) @map("document_type")
  documentNumber String?        @map("document_number") @db.VarChar(20) // NIT, CI, etc.
  contactPerson  String?        @map("contact_person") @db.VarChar(100)
  email          String?        @db.VarChar(100)
  phone          String?        @db.VarChar(20)
  address        String?        @db.Text()
  city           String?        @db.VarChar(50)
  department     Department?    @default(LA_PAZ)
  country        String         @default("Bolivia") @db.VarChar(50)
  postalCode     String?        @map("postal_code") @db.VarChar(10)
  paymentTerms   Int            @default(30) @map("payment_terms") // días
  creditLimit    Decimal?       @map("credit_limit") @db.Decimal(12, 2)
  currentBalance Decimal        @default(0) @map("current_balance") @db.Decimal(12, 2)
  status         SupplierStatus @default(ACTIVE)
  notes          String?        @db.Text()
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?      @map("deleted_at")
  createdBy      Int            @default(0) @map("created_by")
  updatedBy      Int            @default(0) @map("updated_by")
  deletedBy      Int?           @map("deleted_by")

  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]
  supplierDebts  SupplierDebt[]

  @@map("suppliers")
}

model Customer {
  id             Int          @id @default(autoincrement())
  businessId     Int          @default(1) @map("business_id")
  // code            String       @unique @db.VarChar(20)
  firstName      String       @map("first_name") @db.VarChar(50)
  lastName       String?      @map("last_name") @db.VarChar(50)
  documentType   DocumentType @default(CI) @map("document_type")
  documentNumber String?      @map("document_number") @db.VarChar(20) // CI, NIT, etc.
  email          String?      @db.VarChar(100)
  phone          String?      @db.VarChar(20)
  address        String?      @db.Text()
  city           String?      @db.VarChar(50)
  department     Department?  @default(LA_PAZ)
  country        String       @default("Bolivia") @db.VarChar(50)
  postalCode     String?      @map("postal_code") @db.VarChar(10)
  creditLimit    Decimal?     @map("credit_limit") @db.Decimal(12, 2)
  currentBalance Decimal      @default(0) @map("current_balance") @db.Decimal(12, 2)
  loyaltyPoints  Int          @default(0) @map("loyalty_points")
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?    @map("deleted_at")
  createdBy      Int          @default(0) @map("created_by")
  updatedBy      Int          @default(0) @map("updated_by")
  deletedBy      Int?         @map("deleted_by")

  business      Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  carts         Cart[]
  sales         Sale[]
  customerDebts CustomerDebt[]

  @@map("customers")
}

model PurchaseOrder {
  id           Int                 @id @default(autoincrement())
  businessId   Int                 @default(1) @map("business_id")
  supplierId   Int                 @map("supplier_id")
  poNumber     String?             @unique @map("po_number") @db.VarChar(20)
  status       PurchaseOrderStatus @default(DRAFT)
  orderDate    DateTime            @default(now()) @map("order_date") @db.Timestamptz(6)
  expectedDate DateTime?           @map("expected_date")
  receivedDate DateTime?           @map("received_date")
  subtotal     Decimal             @default(0) @db.Decimal(12, 2)
  taxAmount    Decimal             @default(0) @map("tax_amount") @db.Decimal(12, 2)
  totalAmount  Decimal             @default(0) @map("total_amount") @db.Decimal(12, 2)
  notes        String?             @db.Text()
  createdAt    DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime            @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime?           @map("deleted_at")
  createdBy    Int                 @default(0) @map("created_by")
  updatedBy    Int                 @default(0) @map("updated_by")
  deletedBy    Int?                @map("deleted_by")
  approvedBy   Int?                @map("approved_by")

  business      Business            @relation(fields: [businessId], references: [id], onDelete: Cascade)
  supplier      Supplier            @relation(fields: [supplierId], references: [id])
  items         PurchaseOrderItem[]
  supplierDebts SupplierDebt[]
  User          User?               @relation(fields: [userId], references: [id])
  userId        Int?

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id               Int      @id @default(autoincrement())
  purchaseOrderId  Int      @map("purchase_order_id")
  productId        Int      @map("product_id")
  quantity         Int
  unitCost         Decimal  @map("unit_cost") @db.Decimal(10, 2)
  receivedQuantity Int      @default(0) @map("received_quantity")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

model SupplierDebt {
  id              Int       @id @default(autoincrement())
  supplierId      Int       @map("supplier_id")
  purchaseOrderId Int?      @map("purchase_order_id")
  amount          Decimal   @db.Decimal(12, 2)
  paidAmount      Decimal   @default(0) @map("paid_amount") @db.Decimal(12, 2)
  dueDate         DateTime  @map("due_date")
  isPaid          Boolean   @default(false) @map("is_paid")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  paidAt          DateTime? @map("paid_at")

  supplier      Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  @@map("supplier_debts")
}

model Cart {
  id          Int        @id @default(autoincrement())
  businessId  Int        @map("business_id")
  userId      Int        @map("user_id")
  customerId  Int?       @map("customer_id")
  status      CartStatus @default(ACTIVE)
  subtotal    Decimal    @default(0) @db.Decimal(12, 2)
  taxAmount   Decimal    @default(0) @map("tax_amount") @db.Decimal(12, 2)
  totalAmount Decimal    @default(0) @map("total_amount") @db.Decimal(12, 2)
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)

  business Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id])
  customer Customer?  @relation(fields: [customerId], references: [id])
  items    CartItem[]
  sale     Sale?

  @@unique([businessId, userId, status], name: "unique_active_cart")
  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int      @map("cart_id")
  productId  Int      @map("product_id")
  quantity   Int
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  taxRate    Decimal  @default(13) @map("tax_rate") @db.Decimal(5, 2) // IVA 13%
  taxAmount  Decimal  @default(0) @map("tax_amount") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Sale {
  id                Int           @id @default(autoincrement())
  businessId        Int           @map("business_id")
  cartId            Int           @unique @map("cart_id")
  userId            Int           @map("user_id")
  customerId        Int?          @map("customer_id")
  invoiceNumber     String        @unique @map("invoice_number") @db.VarChar(20) // Número de factura
  invoiceType       InvoiceType   @default(FACTURA) @map("invoice_type")
  authorizationCode String?       @map("authorization_code") @db.VarChar(50) // Código de autorización Siat
  controlCode       String?       @map("control_code") @db.VarChar(50) // Código de control
  status            SaleStatus    @default(COMPLETED)
  subtotal          Decimal       @db.Decimal(12, 2)
  taxAmount         Decimal       @map("tax_amount") @db.Decimal(12, 2)
  discountAmount    Decimal       @default(0) @map("discount_amount") @db.Decimal(12, 2)
  totalAmount       Decimal       @map("total_amount") @db.Decimal(12, 2)
  paymentMethod     PaymentMethod @map("payment_method")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  notes             String?       @db.Text()
  createdAt         DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt         DateTime?     @map("deleted_at")
  createdBy         Int           @default(0) @map("created_by")
  updatedBy         Int           @default(0) @map("updated_by")
  deletedBy         Int?          @map("deleted_by")

  business       Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  cart           Cart           @relation(fields: [cartId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  customer       Customer?      @relation(fields: [customerId], references: [id])
  items          SaleItem[]
  customerDebts  CustomerDebt[]
  CashRegister   CashRegister?  @relation(fields: [cashRegisterId], references: [id])
  cashRegisterId Int?

  @@map("sales")
}

model SaleItem {
  id             Int      @id @default(autoincrement())
  saleId         Int      @map("sale_id")
  productId      Int      @map("product_id")
  quantity       Int
  unitPrice      Decimal  @map("unit_price") @db.Decimal(10, 2)
  taxRate        Decimal  @default(13) @map("tax_rate") @db.Decimal(5, 2) // IVA 13%
  taxAmount      Decimal  @map("tax_amount") @db.Decimal(10, 2)
  discountAmount Decimal  @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalPrice     Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model CustomerDebt {
  id         Int       @id @default(autoincrement())
  customerId Int       @map("customer_id")
  saleId     Int?      @map("sale_id")
  amount     Decimal   @db.Decimal(12, 2)
  paidAmount Decimal   @default(0) @map("paid_amount") @db.Decimal(12, 2)
  dueDate    DateTime  @map("due_date")
  isPaid     Boolean   @default(false) @map("is_paid")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  paidAt     DateTime? @map("paid_at")

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sale     Sale?    @relation(fields: [saleId], references: [id])

  @@map("customer_debts")
}

model CashRegister {
  id             Int                @id @default(autoincrement())
  businessId     Int                @map("business_id")
  userId         Int                @map("user_id")
  registerNumber String             @unique @map("register_number") @db.VarChar(20)
  openingAmount  Decimal            @map("opening_amount") @db.Decimal(12, 2)
  closingAmount  Decimal?           @map("closing_amount") @db.Decimal(12, 2)
  currentAmount  Decimal            @map("current_amount") @db.Decimal(12, 2)
  openingDate    DateTime           @default(now()) @map("opening_date") @db.Timestamptz(6)
  closingDate    DateTime?          @map("closing_date") @db.Timestamptz(6)
  status         CashRegisterStatus @default(OPEN)
  notes          String?            @db.Text()
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime           @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?          @map("deleted_at")
  createdBy      Int                @default(0) @map("created_by")
  updatedBy      Int                @default(0) @map("updated_by")
  deletedBy      Int?               @map("deleted_by")

  business  Business            @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id])
  sales     Sale[]
  auditLogs AuditCashRegister[]

  @@map("cash_registers")
}

model InventoryTransaction {
  id              Int                      @id @default(autoincrement())
  businessId      Int                      @map("business_id")
  productId       Int                      @map("product_id")
  userId          Int                      @map("user_id")
  transactionType InventoryTransactionType @map("transaction_type")
  quantity        Int
  unitCost        Decimal                  @map("unit_cost") @db.Decimal(10, 2)
  totalCost       Decimal                  @map("total_cost") @db.Decimal(12, 2)
  referenceId     Int?                     @map("reference_id") // ID de la transacción relacionada (venta, compra, etc.)
  referenceType   String?                  @map("reference_type") @db.VarChar(50) // 'sale', 'purchase', 'adjustment', etc.
  notes           String?                  @db.Text()
  createdAt       DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)

  // business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  // product  Product  @relation(fields: [productId], references: [id])
  // user     User     @relation(fields: [userId], references: [id])

  @@map("inventory_transactions")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  businessId Int?     @map("business_id")
  userId     Int      @map("user_id")
  action     String   @db.VarChar(50)
  entity     String   @db.VarChar(50)
  entityId   Int      @map("entity_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text()
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  business Business? @relation(fields: [businessId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([createdAt])
  @@index([businessId])
  @@map("audit_logs")
}

model AuditCashRegister {
  id             Int      @id @default(autoincrement())
  cashRegisterId Int      @map("cash_register_id")
  userId         Int      @map("user_id")
  action         String   @db.VarChar(50)
  amount         Decimal? @db.Decimal(12, 2)
  details        String?  @db.Text()
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  cashRegister CashRegister @relation(fields: [cashRegisterId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@map("audit_cash_registers")
}
