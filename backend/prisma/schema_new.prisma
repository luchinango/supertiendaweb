generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  output                   = "./schemas"
  includeRequiredFields    = "true"
  keepRelationScalarFields = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS - ESTADOS Y TIPOS
// ========================================

enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  INACTIVE
  SUSPENDED
  LOCKED
  PASSWORD_RESET
  DELETED
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
  RETIRED
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum CartStatus {
  ACTIVE
  PROCESSING
  COMPLETED
  ABANDONED
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  GIFT_CARD
  LOYALTY_POINTS
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum InventoryTransactionType {
  PURCHASE
  SALE
  ADJUSTMENT
  TRANSFER
  RETURN
  DAMAGED
  EXPIRED
  THEFT
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  OUT_OF_STOCK
}

enum CashRegisterStatus {
  OPEN
  CLOSED
  SUSPENDED
}

enum TaxType {
  VAT
  GST
  SALES_TAX
  EXEMPT
}

// ========================================
// MODELOS PRINCIPALES
// ========================================

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique @db.VarChar(50)
  email             String             @unique @db.VarChar(100)
  password_hash     String             @db.VarChar(255)
  first_name        String             @db.VarChar(50)
  last_name         String?            @db.VarChar(50)
  phone             String?            @db.VarChar(20)
  status            UserStatus         @default(PENDING_VERIFICATION)
  role_id           Int
  created_at        DateTime           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime           @default(now()) @db.Timestamptz(6)
  last_login        DateTime?          @db.Timestamptz(6)
  
  // Relaciones
  role              Role               @relation(fields: [role_id], references: [id])
  employee          Employee?
  auditLogs         AuditLog[]
  cashRegisters     CashRegister[]
  sales             Sale[]
  carts             Cart[]
  purchaseOrders    PurchaseOrder[]
  inventoryTransactions InventoryTransaction[]
  
  @@map("users")
}

model Role {
  id          Int            @id @default(autoincrement())
  code        String         @unique @db.VarChar(20)
  name        String         @db.VarChar(50)
  description String?        @db.Text()
  is_active   Boolean        @default(true)
  created_at  DateTime       @default(now()) @db.Timestamptz(6)
  updated_at  DateTime       @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  users       User[]
  permissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          Int            @id @default(autoincrement())
  code        String         @unique @db.VarChar(50)
  name        String         @db.VarChar(100)
  description String?        @db.Text()
  module      String         @db.VarChar(50)
  is_active   Boolean        @default(true)
  created_at  DateTime       @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  roles       RolePermission[]
  
  @@map("permissions")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role_id      Int
  permission_id Int
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  role         Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  
  @@unique([role_id, permission_id])
  @@map("role_permissions")
}

model Business {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  legal_name       String?            @db.VarChar(150)
  description      String?            @db.Text()
  tax_id           String?            @unique @db.VarChar(20)
  email            String?            @db.VarChar(100)
  phone            String?            @db.VarChar(20)
  address          String?            @db.Text()
  city             String?            @db.VarChar(50)
  state            String?            @db.VarChar(50)
  country          String?            @db.VarChar(50)
  postal_code      String?            @db.VarChar(10)
  logo_url         String?
  website          String?
  timezone         String             @default("UTC-4") @db.VarChar(50)
  currency         String             @default("BOB") @db.VarChar(3)
  tax_rate         Decimal            @default(0) @db.Decimal(5, 4)
  status           BusinessStatus     @default(ACTIVE)
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  created_by       Int
  updated_by       Int
  
  // Relaciones
  createdBy        User               @relation("BusinessCreatedBy", fields: [created_by], references: [id])
  updatedBy        User               @relation("BusinessUpdatedBy", fields: [updated_by], references: [id])
  employees        Employee[]
  products         BusinessProduct[]
  suppliers        Supplier[]
  categories       Category[]
  cashRegisters    CashRegister[]
  sales            Sale[]
  carts            Cart[]
  purchaseOrders   PurchaseOrder[]
  inventoryTransactions InventoryTransaction[]
  
  @@map("businesses")
}

model Employee {
  id           Int            @id @default(autoincrement())
  user_id      Int            @unique
  business_id  Int
  employee_code String         @unique @db.VarChar(20)
  first_name   String         @db.VarChar(50)
  last_name    String?        @db.VarChar(50)
  position     String         @db.VarChar(100)
  department   String?        @db.VarChar(50)
  start_date   DateTime
  end_date     DateTime?
  salary       Decimal?       @db.Decimal(10, 2)
  status       EmployeeStatus @default(ACTIVE)
  gender       Gender         @default(UNSPECIFIED)
  birth_date   DateTime?
  email        String         @unique @db.VarChar(100)
  phone        String?        @db.VarChar(20)
  address      String?        @db.Text()
  emergency_contact String?   @db.VarChar(100)
  emergency_phone String?     @db.VarChar(20)
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  business     Business       @relation(fields: [business_id], references: [id], onDelete: Cascade)
  
  @@map("employees")
}

model Category {
  id          Int       @id @default(autoincrement())
  business_id Int
  name        String    @db.VarChar(100)
  description String?   @db.Text()
  parent_id   Int?
  is_active   Boolean   @default(true)
  sort_order  Int       @default(0)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business    Business   @relation(fields: [business_id], references: [id], onDelete: Cascade)
  parent      Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@unique([business_id, name])
  @@map("categories")
}

model Product {
  id              Int           @id @default(autoincrement())
  business_id     Int
  category_id     Int
  sku             String        @unique @db.VarChar(50)
  barcode         String?       @unique @db.VarChar(50)
  name            String        @db.VarChar(200)
  description     String?       @db.Text()
  brand           String?       @db.VarChar(100)
  model           String?       @db.VarChar(100)
  unit            String        @db.VarChar(20) // kg, l, pcs, etc.
  weight          Decimal?      @db.Decimal(8, 3)
  dimensions      String?       @db.VarChar(50) // "LxWxH"
  cost_price      Decimal       @db.Decimal(10, 2)
  selling_price   Decimal       @db.Decimal(10, 2)
  tax_rate        Decimal       @default(0) @db.Decimal(5, 4)
  min_stock       Int           @default(0)
  max_stock       Int?
  reorder_point   Int           @default(0)
  is_active       Boolean       @default(true)
  status          ProductStatus @default(ACTIVE)
  expiry_date     DateTime?
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business      @relation(fields: [business_id], references: [id], onDelete: Cascade)
  category        Category      @relation(fields: [category_id], references: [id])
  businessProducts BusinessProduct[]
  cartItems       CartItem[]
  saleItems       SaleItem[]
  purchaseOrderItems PurchaseOrderItem[]
  inventoryTransactions InventoryTransaction[]
  
  @@map("products")
}

model BusinessProduct {
  id              Int       @id @default(autoincrement())
  business_id     Int
  product_id      Int
  custom_price    Decimal?  @db.Decimal(10, 2)
  current_stock   Int       @default(0)
  reserved_stock  Int       @default(0)
  available_stock Int       @default(0)
  last_restock    DateTime?
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business  @relation(fields: [business_id], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@unique([business_id, product_id])
  @@map("business_products")
}

model Supplier {
  id              Int            @id @default(autoincrement())
  business_id     Int
  code            String         @unique @db.VarChar(20)
  name            String         @db.VarChar(200)
  contact_person  String?        @db.VarChar(100)
  email           String?        @db.VarChar(100)
  phone           String?        @db.VarChar(20)
  address         String?        @db.Text()
  city            String?        @db.VarChar(50)
  state           String?        @db.VarChar(50)
  country         String?        @db.VarChar(50)
  postal_code     String?        @db.VarChar(10)
  tax_id          String?        @db.VarChar(20)
  payment_terms   Int            @default(30) // días
  credit_limit    Decimal?       @db.Decimal(12, 2)
  current_balance Decimal        @default(0) @db.Decimal(12, 2)
  status          SupplierStatus @default(ACTIVE)
  notes           String?        @db.Text()
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime       @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business       @relation(fields: [business_id], references: [id], onDelete: Cascade)
  purchaseOrders  PurchaseOrder[]
  supplierDebts   SupplierDebt[]
  
  @@map("suppliers")
}

model PurchaseOrder {
  id              Int                 @id @default(autoincrement())
  business_id     Int
  supplier_id     Int
  po_number       String              @unique @db.VarChar(20)
  status          PurchaseOrderStatus @default(DRAFT)
  order_date      DateTime            @default(now()) @db.Timestamptz(6)
  expected_date   DateTime?
  received_date   DateTime?
  subtotal        Decimal             @default(0) @db.Decimal(12, 2)
  tax_amount      Decimal             @default(0) @db.Decimal(12, 2)
  total_amount    Decimal             @default(0) @db.Decimal(12, 2)
  notes           String?             @db.Text()
  created_by      Int
  approved_by     Int?
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  updated_at      DateTime            @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business            @relation(fields: [business_id], references: [id], onDelete: Cascade)
  supplier        Supplier            @relation(fields: [supplier_id], references: [id])
  createdBy       User                @relation("PurchaseOrderCreatedBy", fields: [created_by], references: [id])
  approvedBy      User?               @relation("PurchaseOrderApprovedBy", fields: [approved_by], references: [id])
  items           PurchaseOrderItem[]
  
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              Int      @id @default(autoincrement())
  purchase_order_id Int
  product_id      Int
  quantity        Int
  unit_cost       Decimal  @db.Decimal(10, 2)
  received_quantity Int    @default(0)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  purchaseOrder   PurchaseOrder @relation(fields: [purchase_order_id], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [product_id], references: [id])
  
  @@map("purchase_order_items")
}

model SupplierDebt {
  id              Int       @id @default(autoincrement())
  supplier_id     Int
  purchase_order_id Int?
  amount          Decimal   @db.Decimal(12, 2)
  paid_amount     Decimal   @default(0) @db.Decimal(12, 2)
  due_date        DateTime
  is_paid         Boolean   @default(false)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  paid_at         DateTime?
  
  // Relaciones
  supplier        Supplier      @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  purchaseOrder   PurchaseOrder? @relation(fields: [purchase_order_id], references: [id])
  
  @@map("supplier_debts")
}

model Cart {
  id           Int        @id @default(autoincrement())
  business_id  Int
  user_id      Int
  customer_id  Int?
  status       CartStatus @default(ACTIVE)
  subtotal     Decimal    @default(0) @db.Decimal(12, 2)
  tax_amount   Decimal    @default(0) @db.Decimal(12, 2)
  total_amount Decimal    @default(0) @db.Decimal(12, 2)
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime   @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business     Business   @relation(fields: [business_id], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [user_id], references: [id])
  customer     Customer?  @relation(fields: [customer_id], references: [id])
  items        CartItem[]
  sale         Sale?
  
  @@unique([business_id, user_id, status], name: "unique_active_cart")
  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int
  unit_price Decimal  @db.Decimal(10, 2)
  tax_rate   Decimal  @default(0) @db.Decimal(5, 4)
  tax_amount Decimal  @default(0) @db.Decimal(10, 2)
  total_price Decimal @db.Decimal(10, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id])
  
  @@unique([cart_id, product_id])
  @@map("cart_items")
}

model Sale {
  id              Int           @id @default(autoincrement())
  business_id     Int
  cart_id         Int           @unique
  user_id         Int
  customer_id     Int?
  sale_number     String        @unique @db.VarChar(20)
  status          SaleStatus    @default(COMPLETED)
  subtotal        Decimal       @db.Decimal(12, 2)
  tax_amount      Decimal       @db.Decimal(12, 2)
  discount_amount Decimal       @default(0) @db.Decimal(12, 2)
  total_amount    Decimal       @db.Decimal(12, 2)
  payment_method  PaymentMethod
  payment_status  PaymentStatus @default(PENDING)
  notes           String?       @db.Text()
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business    @relation(fields: [business_id], references: [id], onDelete: Cascade)
  cart            Cart        @relation(fields: [cart_id], references: [id])
  user            User        @relation(fields: [user_id], references: [id])
  customer        Customer?   @relation(fields: [customer_id], references: [id])
  items           SaleItem[]
  
  @@map("sales")
}

model SaleItem {
  id         Int      @id @default(autoincrement())
  sale_id    Int
  product_id Int
  quantity   Int
  unit_price Decimal  @db.Decimal(10, 2)
  tax_rate   Decimal  @db.Decimal(5, 4)
  tax_amount Decimal  @db.Decimal(10, 2)
  discount_amount Decimal @default(0) @db.Decimal(10, 2)
  total_price Decimal @db.Decimal(10, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  sale       Sale    @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id])
  
  @@map("sale_items")
}

model Customer {
  id              Int       @id @default(autoincrement())
  business_id     Int
  code            String    @unique @db.VarChar(20)
  first_name      String    @db.VarChar(50)
  last_name       String?   @db.VarChar(50)
  email           String?   @db.VarChar(100)
  phone           String?   @db.VarChar(20)
  address         String?   @db.Text()
  city            String?   @db.VarChar(50)
  state           String?   @db.VarChar(50)
  country         String?   @db.VarChar(50)
  postal_code     String?   @db.VarChar(10)
  tax_id          String?   @db.VarChar(20)
  credit_limit    Decimal?  @db.Decimal(12, 2)
  current_balance Decimal   @default(0) @db.Decimal(12, 2)
  loyalty_points  Int       @default(0)
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  carts           Cart[]
  sales           Sale[]
  customerDebts   CustomerDebt[]
  
  @@map("customers")
}

model CustomerDebt {
  id          Int       @id @default(autoincrement())
  customer_id Int
  sale_id     Int?
  amount      Decimal   @db.Decimal(12, 2)
  paid_amount Decimal   @default(0) @db.Decimal(12, 2)
  due_date    DateTime
  is_paid     Boolean   @default(false)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  paid_at     DateTime?
  
  // Relaciones
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  sale        Sale?    @relation(fields: [sale_id], references: [id])
  
  @@map("customer_debts")
}

model CashRegister {
  id              Int                 @id @default(autoincrement())
  business_id     Int
  user_id         Int
  register_number String              @unique @db.VarChar(20)
  opening_amount  Decimal             @db.Decimal(12, 2)
  closing_amount  Decimal?            @db.Decimal(12, 2)
  current_amount  Decimal             @db.Decimal(12, 2)
  opening_date    DateTime            @default(now()) @db.Timestamptz(6)
  closing_date    DateTime?           @db.Timestamptz(6)
  status          CashRegisterStatus  @default(OPEN)
  notes           String?             @db.Text()
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  updated_at      DateTime            @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business            @relation(fields: [business_id], references: [id], onDelete: Cascade)
  user            User                @relation(fields: [user_id], references: [id])
  sales           Sale[]
  auditLogs       AuditCashRegister[]
  
  @@map("cash_registers")
}

model InventoryTransaction {
  id              Int                    @id @default(autoincrement())
  business_id     Int
  product_id      Int
  user_id         Int
  transaction_type InventoryTransactionType
  quantity        Int
  unit_cost       Decimal                @db.Decimal(10, 2)
  total_cost      Decimal                @db.Decimal(12, 2)
  reference_id    Int?                   // ID de la transacción relacionada (venta, compra, etc.)
  reference_type  String?                @db.VarChar(50) // 'sale', 'purchase', 'adjustment', etc.
  notes           String?                @db.Text()
  created_at      DateTime               @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business        Business               @relation(fields: [business_id], references: [id], onDelete: Cascade)
  product         Product                @relation(fields: [product_id], references: [id])
  user            User                   @relation(fields: [user_id], references: [id])
  
  @@map("inventory_transactions")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  business_id Int?
  user_id    Int
  action     String   @db.VarChar(50)
  entity     String   @db.VarChar(50)
  entity_id  Int
  old_values Json?
  new_values Json?
  ip_address String?  @db.VarChar(45)
  user_agent String?  @db.Text()
  created_at DateTime @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  business   Business? @relation(fields: [business_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])
  
  @@index([entity, entity_id])
  @@index([created_at])
  @@index([business_id])
  @@map("audit_logs")
}

model AuditCashRegister {
  id              Int           @id @default(autoincrement())
  cash_register_id Int
  user_id         Int
  action          String        @db.VarChar(50)
  amount          Decimal?      @db.Decimal(12, 2)
  details         String?       @db.Text()
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  
  // Relaciones
  cashRegister    CashRegister  @relation(fields: [cash_register_id], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [user_id], references: [id])
  
  @@map("audit_cash_registers")
} 